---
- name: Generate an OpenSSH keypair with the default values (4096 bits, rsa)
  openssh_keypair:
    path: "{{ ssh_path }}"
  
- name: Get current version of kubectl
  command: curl -L -s "{{ kubectl_base_url }}/stable.txt"
  register: kubectl_version_output

- name: Set kubectl version
  set_fact:
    kubectl_version: "{{ kubectl_version_output.stdout }}"



- name: Download kubectl
  get_url:
    url: "{{ kubectl_base_url }}/{{ kubectl_version }}/{{ kubectl_url_bin_base }}/kubectl"
    dest: "{{ kubectl_bin_dest }}"
    mode: "0755"
    owner: "root"
    group: "root"

- name: Get latest release JSON
  uri:
    url: "{{ kops_latest_release_url }}"
    return_content: yes
  register: release_response

- name: Extract tag name
  set_fact:
    kops_version: "{{ release_response.content | from_json | json_query('tag_name') }}"

- name: Print tag_name
  debug:
    var: kops_version

- name: Download kops binary
  get_url: 
    url: "{{ kops_download_url_base }}/{{ kops_version }}/kops-linux-amd64"
    dest: "/usr/local/bin/kops"
    mode: "0755"

- name: Download helm latest binary zipped file
  get_url:
    url: "{{ helm_get_url }}"
    dest:	"{{ helm_dest }}.tar.gz"
    

- name: Uzip the Helm
  unarchive:
    src: "{{ helm_dest }}.tar.gz"
    dest: "./"
    remote_src: yes

- name: Move the helm binary
  command: mv linux-amd64/helm /usr/local/bin/helm

- name: Create Kubernetes Cluster
  become: no
  command: kops create cluster --name="{{ domain_name }}" --state="{{ s3_bucket_url }}" --zones="{{ node_zones }}" --node-count="{{ number_of_nodes }}" --node-size="{{ node_size }}" --master-size="{{ master_size }}" --dns-zone="{{ domain_name }}"  --node-volume-size="{{ node_volume }}" --master-volume-size="{{ master_volume }}"

- name: Update cluster
  become: no
  command: kops update cluster --name="{{ domain_name }}" --state="{{ s3_bucket_url }}" --yes --admin